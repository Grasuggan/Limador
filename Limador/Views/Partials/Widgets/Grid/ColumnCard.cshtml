@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.ColumnCard>
@using ContentModels = Umbraco.Web.PublishedModels;
@using Igloo.Extensions
@{
    var containerWidth = (string)ViewData["containerWidth"];
    var cardColorClass = Model.TextColor == "ffffff" ? "light-color" : "dark-color"; 

    @*Calculate crop*@
    double targetWidth = int.Parse(Umbraco.AssignedContentItem.Settings().Theme.ContainerWidth.Replace("px", ""));
    double targetHeight = 1080;
    double cWidth = int.Parse(Model.ColumnWidth.Replace("%", ""));
    double cHeight = (double)Model.Height;
    if (containerWidth == "small")
    {
        targetWidth = int.Parse(Umbraco.AssignedContentItem.Settings().Theme.ContainerWidthSmall.Replace("px", ""));
    }
    else if (containerWidth == "big")
    {
        targetWidth = int.Parse(Umbraco.AssignedContentItem.Settings().Theme.ContainerWidthBig.Replace("px", ""));
    }
    else if (containerWidth == "full width")
    {
        targetWidth = 1920;
    }
    
    targetWidth = targetWidth * (cWidth / 100);
    targetHeight = targetHeight * (cHeight / 100);
    
    var backgroundUrl = Model.Background != null ? Model.Background.Url : "";
    
    if (targetWidth > targetHeight)
    {
        backgroundUrl = backgroundUrl + "?width=" + Convert.ToInt32(targetWidth) + "px";
    }
    else
    {
        backgroundUrl = backgroundUrl + "?height=" + Convert.ToInt32(targetHeight) + "px";
    }
}

<div class="grid-item grid-item--card card @(cardColorClass)">

    @if (Model.Link != null)
    {
        <a href="@(Model.Link.Url)" target="@(Model.Link.Target)" class="card__text card__text--@(Model.TextSize) v-align-@(Model.VerticalTextAlignment) text-@(Model.HorizontalTextAlignment)" style="min-height: @(Model.Height)vh;">

            <span class="card__text-inner">
                <span class="card__header act-heading">@Model.Heading</span>
                <span>@Model.Text</span>
            </span>

        </a>
    }
    else
    {
        <span class="card__text card__text--@(Model.TextSize) v-align-@(Model.VerticalTextAlignment) text-@(Model.HorizontalTextAlignment)" style="min-height: @(Model.Height)vh;">

            <span class="card__text-inner">
                <span class="card__header act-heading">@Model.Heading</span>
                <span>@Model.Text</span>

                @if (Model.Buttons != null && Model.Buttons.Any())
                {
                    <span class="card__button">
                        @foreach(var button in Model.Buttons){
                            @Html.Partial("/Views/Partials/Widgets/RenderButton.cshtml", button)
                        }
                    </span>
                }
            </span>

        </span>

    }

    <div class="card__bg lazyload" data-bgset="@(backgroundUrl)"></div>
    <div class="card__overlay" style="opacity:0.@(Model.OverlayStrength)"></div>

</div>