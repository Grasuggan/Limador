@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.Grid>
@using ContentModels = Umbraco.Web.PublishedModels;
@using Igloo.Models;
@using Igloo.Extensions
@using Umbraco.Web.Models
@{
    @*=====================
    # Grid Settings
    =====================*@
    var order = (int)ViewData["order"];

    var containerWidthClass = "container";
    switch (Model.ContainerWidth)
    {
        case "small":
            containerWidthClass = "container container--small";
            break;
        case "standard":
            containerWidthClass = "container";
            break;
        case "big":
            containerWidthClass = "container container--big";
            break;
        case "full width":
            containerWidthClass = "container-fluid";
            break;
    }

    var removeColumnGutterClass = Model.RemoveColumnGutter ? "row--flat" : "";
    var centerColumnClass = Model.CenterColumns ? "row--center" : "";
    var centerColumnsVerticallyClass = Model.CenterColumnsVertically ? "row--v-center" : "";
    var compactClass = Model.Compact ? "grid--compact" : "";
    var textColorClass = Model.TextColor == "ffffff" ? "light-color" : ""; 

    var backgroundColorClass = "white-bg";
    if (Model.BackgroundColor != "")
    {
        switch (Model.BackgroundColor)
        {
            case "ffffff":
                backgroundColorClass = "white-bg";
                break;
            case "000000":
                backgroundColorClass = "dark-bg";
                break;
            case "eeeeee":
                backgroundColorClass = "gray-bg";
                break;
            default:
                backgroundColorClass = "theme-bg";
                break;
        }
    }

    var backgroundMediaUrl = Model.BackgroundImage != null ? Model.BackgroundImage.Url : "";
    if (backgroundMediaUrl != "")
    {
        backgroundColorClass = "";
    }
}

@if (Model.Columns != null && Model.Columns.Any())
{
    <div class="grid @(backgroundColorClass) @(textColorClass) @(removeColumnGutterClass) @(compactClass)" id="@(order == 0 ? "content" : "")">
        <div class="@(containerWidthClass)">
            <div class="row @(removeColumnGutterClass) @(centerColumnClass) @(centerColumnsVerticallyClass)">

                @foreach (var column in Model.Columns)
                {
                    var columnWidth = column.Value("columnWidth") != null ? column.Value<string>("columnWidth").Replace("%", "") : "100";
                    var columnType = column.ContentType.Alias;

                    if (columnWidth == "25")
                    {
                        columnWidth = "25 col-m-50";
                    }

                    if (columnWidth == "20")
                    {
                        columnWidth = "20 col-m-33";
                    }

                    <div class="col-@(columnWidth) col-s-100">
                        @if (columnType == "lineBreak"){
                            @Html.Partial("/Views/Partials/Shared/LineBreak.cshtml", column)
                        } else {
                            @Html.Partial("/Views/Partials/Widgets/Grid/"+columnType+".cshtml", column, new ViewDataDictionary { { "containerWidth", Model.ContainerWidth }, {"order", order} })
                        }
                    </div>
                }
            </div>
        </div>
        @if (backgroundMediaUrl != "")
        {
            <div class="block__background lazyload"
                 data-bgset="@(backgroundMediaUrl)?upscale=false&width=1280 1280w,
        		@(backgroundMediaUrl)?upscale=false&width=1600 1600w,
        		@(backgroundMediaUrl)?upscale=false&width=1920 1920w"
                 data-sizes="auto">
            </div>
        }
    </div>
}